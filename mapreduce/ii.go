package main

import "mapreduce"

import (
	"sort"
	"strings"
	"unicode"
	"strconv"
	"os"
	"fmt"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	f := func(c rune) bool {
        return !unicode.IsLetter(c)
    }
    slice := make([]mapreduce.KeyValue,0)
    res1 := strings.FieldsFunc(value,f)
    for _,str := range res1{    //
        slice = append(slice,mapreduce.KeyValue{str,document})
    }
    return slice
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func delete_dup(str []string) (ret []string){    //去掉重复词语
    str_len := len(str)
    for i:=0; i < str_len; i++{
        if (i > 0 && str[i-1] == str[i]) || len(str[i])==0{
            continue;
        }
        ret = append(ret, str[i])
    }
    return ret
}

func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	var filename string
    sort.Strings(values)
    ret := delete_dup(values)   //去掉重复词语
    for _,val := range ret{
        filename += val
        filename += ","
    }
    filename = strings.TrimRight(filename,",")
    fname := strconv.Itoa(len(ret))+" "
    fname += filename
    return fname
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
